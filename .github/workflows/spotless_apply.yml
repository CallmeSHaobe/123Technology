name: Spotless Format and Auto PR

on:
  workflow_dispatch:
  pull_request:
    branches: [main, master]
  push:
    branches: [main, master]

# 添加并发控制，防止重复运行
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  spotless-format-and-pr:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      pull-requests: write
      
    # 添加条件，避免由自动化分支触发的工作流
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && !contains(github.head_ref, 'spotless-fixes')) ||
      (github.event_name == 'push' && github.ref_type == 'branch' && !contains(github.ref, 'spotless/') && !contains(github.actor, 'github-actions'))
      
    outputs:
      changes: ${{ steps.spotless_apply.outputs.changes }}
      fixed_branch: ${{ steps.create_branch.outputs.fixed_branch }}
      
    steps:
    - name: Install Ubuntu dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y mesa-utils xvfb x11-xserver-utils

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.head_ref || github.ref }}

    - name: Set up JDK versions
      uses: actions/setup-java@v4
      with:
        java-version: |
          8
          17
          21
        distribution: 'zulu'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run Spotless Apply
      id: spotless_apply
      run: |
        echo "运行 Spotless 格式化..."
        ./gradlew --build-cache --info --stacktrace spotlessApply
        
        echo "检查文件更改..."
        git status
        git diff --name-only
        
        # 检查是否有更改（包括未暂存的更改）
        if ! git diff --quiet || ! git diff --staged --quiet; then
          echo "检测到代码格式化更改"
          echo "changes=true" >> $GITHUB_OUTPUT
          
          # 显示具体的更改
          echo "具体的文件更改："
          git diff --name-only
          git diff --stat
        else
          echo "没有检测到代码格式化更改"
          echo "changes=false" >> $GITHUB_OUTPUT
        fi

    - name: Create and push fixed branch
      if: steps.spotless_apply.outputs.changes == 'true'
      run: |
        # 设置 git 配置
        git config user.name "GitHub Actions"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # 创建唯一的分支名
        TIMESTAMP=$(date +%s)
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          PR_BRANCH="${{ github.head_ref }}"
          # 清理分支名中的特殊字符
          CLEAN_BRANCH=$(echo "${PR_BRANCH}" | sed 's/[^a-zA-Z0-9._-]/-/g')
          FIXED_BRANCH="${CLEAN_BRANCH}-spotless-fixes-${TIMESTAMP}"
        else
          FIXED_BRANCH="spotless/auto-format-${TIMESTAMP}"
        fi
        
        echo "创建分支: ${FIXED_BRANCH}"
        
        # 添加所有更改并提交
        git add -A
        
        # 检查是否有更改可以提交
        if git diff --cached --quiet; then
          echo "没有更改需要提交"
          echo "changes=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # 切换到新分支并提交更改
        git checkout -b "${FIXED_BRANCH}"
        git commit -m "🔧 Apply spotless code formatting" -m "Automated formatting fixes by GitHub Actions"
        
        # 推送分支
        git push origin "${FIXED_BRANCH}"
        
        # 设置输出变量供后续步骤使用
        echo "fixed_branch=${FIXED_BRANCH}" >> $GITHUB_OUTPUT
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "base_branch=${PR_BRANCH}" >> $GITHUB_OUTPUT
        else
          echo "base_branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        fi
      id: create_branch

    - name: Check if PR already exists
      if: steps.spotless_apply.outputs.changes == 'true'
      id: check_pr
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        FIXED_BRANCH="${{ steps.create_branch.outputs.fixed_branch }}"
        
        # 检查是否已经存在相同分支的 PR
        EXISTING_PR=$(gh pr list --head "${FIXED_BRANCH}" --state open --json number --jq '.[0].number' 2>/dev/null || echo "")
        
        if [ -n "${EXISTING_PR}" ]; then
          echo "PR 已存在: #${EXISTING_PR}"
          echo "pr_exists=true" >> $GITHUB_OUTPUT
          echo "pr_number=${EXISTING_PR}" >> $GITHUB_OUTPUT
        else
          echo "没有找到已存在的 PR"
          echo "pr_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create Pull Request
      if: steps.spotless_apply.outputs.changes == 'true' && steps.check_pr.outputs.pr_exists == 'false'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # 设置 PR 标题和正文
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          PR_TITLE="🔧 Spotless formatting fixes for PR #${{ github.event.pull_request.number }}"
          PR_BODY="This PR contains automated code formatting fixes generated by Spotless.

### Related PR
- Original PR: #${{ github.event.pull_request.number }}

### Changes
- Applied code formatting fixes using Spotless
- No functional changes, only formatting

**Please merge this PR first before proceeding with the original PR.**"
          BASE_BRANCH="${{ github.head_ref }}"
        else
          PR_TITLE="🔧 Automatic Spotless Code Formatting"
          PR_BODY="This PR contains automated code formatting fixes generated by Spotless.

### Changes
- Applied code formatting fixes using Spotless
- No functional changes, only formatting

**This is an automated PR. Please review and merge.**"
          BASE_BRANCH="${{ github.ref_name }}"
        fi
        
        FIXED_BRANCH="${{ steps.create_branch.outputs.fixed_branch }}"
        
        echo "创建 PR: ${FIXED_BRANCH} -> ${BASE_BRANCH}"
        
        # 创建 PR，不指定标签避免错误
        gh pr create \
          --head "${FIXED_BRANCH}" \
          --base "${BASE_BRANCH}" \
          --title "${PR_TITLE}" \
          --body "${PR_BODY}" \
          --draft || echo "PR 创建失败"
        
        # 如果是 PR 事件，在原始 PR 中添加评论
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          ORIGINAL_PR="${{ github.event.pull_request.number }}"
          COMMENT="🔧 **Automated Formatting Notice**

An automated formatting PR has been created to fix code style issues. Please merge the formatting PR first, then you can update this PR.

This ensures consistent code formatting across the codebase."
          
          gh pr comment "${ORIGINAL_PR}" --body "${COMMENT}" || echo "无法添加评论到原始 PR"
        fi

  # 自动删除分支工作流
  delete-branch-on-merge:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    needs: spotless-format-and-pr
    # 只有当有更改且成功创建了分支时才运行
    if: ${{ needs.spotless-format-and-pr.result == 'success' && needs.spotless-format-and-pr.outputs.changes == 'true' && needs.spotless-format-and-pr.outputs.fixed_branch != '' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Wait for PR merge and delete branch
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        FIXED_BRANCH="${{ needs.spotless-format-and-pr.outputs.fixed_branch }}"
        
        if [ -z "${FIXED_BRANCH}" ] || [ "${FIXED_BRANCH}" = "null" ]; then
          echo "错误：fixed_branch 为空，无法继续"
          exit 0
        fi
        
        echo "监控分支 ${FIXED_BRANCH} 的 PR 状态..."
        
        # 等待 PR 创建完成
        echo "等待 PR 创建完成..."
        sleep 30
        
        # 查找对应的 PR
        PR_NUMBER=$(gh pr list --head "${FIXED_BRANCH}" --state all --json number --jq '.[0].number' 2>/dev/null || echo "")
        
        if [ -z "${PR_NUMBER}" ]; then
          echo "未找到分支 ${FIXED_BRANCH} 对应的 PR"
          echo "可能 PR 尚未创建或已被删除，退出监控"
          exit 0
        fi
        
        echo "找到 PR #${PR_NUMBER}，开始监控..."
        
        # 设置最大等待时间（4小时）
        MAX_WAIT_SECONDS=14400
        WAITED_SECONDS=0
        CHECK_INTERVAL=60
        
        # 等待 PR 合并或关闭
        while [ ${WAITED_SECONDS} -lt ${MAX_WAIT_SECONDS} ]; do
          PR_INFO=$(gh pr view "${PR_NUMBER}" --json state,merged,closed 2>/dev/null || echo '{"state":"UNKNOWN","merged":false,"closed":false}')
          PR_STATE=$(echo "${PR_INFO}" | jq -r '.state')
          PR_MERGED=$(echo "${PR_INFO}" | jq -r '.merged')
          
          echo "PR 状态: ${PR_STATE}, 合并状态: ${PR_MERGED}"
          
          if [ "${PR_STATE}" = "MERGED" ] || [ "${PR_MERGED}" = "true" ]; then
            echo "PR #${PR_NUMBER} 已合并，开始删除分支 ${FIXED_BRANCH}"
            
            # 删除本地和远程分支
            if git show-ref --verify --quiet "refs/heads/${FIXED_BRANCH}" 2>/dev/null; then
              git push origin --delete "${FIXED_BRANCH}"
              echo "✅ 分支 ${FIXED_BRANCH} 已成功删除"
            else
              echo "⚠️  分支 ${FIXED_BRANCH} 不存在，可能已被删除"
            fi
            
            exit 0
          elif [ "${PR_STATE}" = "CLOSED" ]; then
            echo "PR #${PR_NUMBER} 已关闭但未合并，保留分支 ${FIXED_BRANCH}"
            exit 0
          fi
          
          echo "等待 ${CHECK_INTERVAL} 秒后重试... (已等待 ${WAITED_SECONDS} 秒)"
          sleep ${CHECK_INTERVAL}
          WAITED_SECONDS=$((WAITED_SECONDS + CHECK_INTERVAL))
        done
        
        echo "⏰ 达到最大等待时间（4小时），PR 仍未合并，停止监控"
        echo "分支 ${FIXED_BRANCH} 将保持存在"
