name: Spotless Format and Auto PR

on:
  workflow_dispatch:
  pull_request:
    branches: [main, master]
  push:
    branches: [main, master]

jobs:
  spotless-format-and-pr:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      pull-requests: write
      
    steps:
    - name: Install Ubuntu dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y mesa-utils xvfb x11-xserver-utils

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.head_ref || github.ref }}

    - name: Set up JDK versions
      uses: actions/setup-java@v4
      with:
        java-version: |
          8
          17
          21
        distribution: 'zulu'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run Spotless Apply
      id: spotless_apply
      run: |
        echo "运行 Spotless 格式化..."
        ./gradlew --build-cache --info --stacktrace spotlessApply
        
        echo "检查文件更改..."
        git status
        git diff --name-only
        
        # 检查是否有更改（包括未暂存的更改）
        if ! git diff --quiet || ! git diff --staged --quiet; then
          echo "检测到代码格式化更改"
          echo "changes=true" >> $GITHUB_OUTPUT
          
          # 显示具体的更改
          echo "具体的文件更改："
          git diff --name-only
          git diff --stat
        else
          echo "没有检测到代码格式化更改"
          echo "changes=false" >> $GITHUB_OUTPUT
        fi

    - name: Create and push fixed branch
      if: steps.spotless_apply.outputs.changes == 'true'
      run: |
        # 设置 git 配置
        git config user.name "GitHub Actions"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # 创建分支名
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          PR_BRANCH="${{ github.head_ref }}"
          FIXED_BRANCH="${PR_BRANCH}-spotless-fixes"
        else
          BASE_BRANCH="${{ github.ref_name }}"
          FIXED_BRANCH="spotless/auto-format-$(date +%s)"
        fi
        
        echo "创建分支: ${FIXED_BRANCH}"
        
        # 添加所有更改并提交
        git add -A
        git status
        
        # 切换到新分支并提交更改
        git checkout -b "${FIXED_BRANCH}"
        git commit -m "Apply spotless formatting" || exit 0
        
        # 推送分支
        git push origin "${FIXED_BRANCH}"
        
        # 设置输出变量供后续步骤使用
        echo "fixed_branch=${FIXED_BRANCH}" >> $GITHUB_OUTPUT
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "base_branch=${PR_BRANCH}" >> $GITHUB_OUTPUT
        else
          echo "base_branch=${BASE_BRANCH}" >> $GITHUB_OUTPUT
        fi
      id: create_branch

    - name: Create Pull Request
      if: steps.spotless_apply.outputs.changes == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # 设置 PR 标题和正文
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          PR_TITLE="Spotless formatting fixes for PR ${{ github.event.pull_request.number }}"
          PR_BODY="Automatically applied spotless formatting fixes for PR ${{ github.event.pull_request.number }}."
          BASE_BRANCH="${{ github.head_ref }}"
        else
          PR_TITLE="Automatic Spotless Code Formatting"
          PR_BODY="Automatically applied spotless formatting fixes."
          BASE_BRANCH="${{ github.ref_name }}"
        fi
        
        echo "创建 PR: ${FIXED_BRANCH} -> ${BASE_BRANCH}"
        
        # 创建 PR
        gh pr create \
          --head "${{ steps.create_branch.outputs.fixed_branch }}" \
          --base "${{ steps.create_branch.outputs.base_branch }}" \
          --title "${PR_TITLE}" \
          --body "${PR_BODY}" \
          --label "automated-pr,code-formatting" || echo "PR 创建失败或已存在"
        
        # 如果是 PR 事件，在原始 PR 中添加评论
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          ORIGINAL_PR="${{ github.event.pull_request.number }}"
          COMMENT="Automated formatting fixes have been created. Please merge the formatting PR first."
          
          gh pr comment "${ORIGINAL_PR}" --body "${COMMENT}" || echo "无法添加评论到原始 PR"
        fi
              env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 新增：自动删除分支工作流
  delete-branch-on-merge:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    # 只在 spotless-format-and-pr 工作流成功创建 PR 后运行
    needs: spotless-format-and-pr
    if: ${{ needs.spotless-format-and-pr.result == 'success' && needs.spotless-format-and-pr.outputs.changes == 'true' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Wait for PR merge and delete branch
      run: |
        FIXED_BRANCH="${{ needs.spotless-format-and-pr.outputs.fixed_branch }}"
        
        echo "等待 PR 合并并自动删除分支: ${FIXED_BRANCH}"
        
        # 获取创建的 PR 信息
        PR_JSON=$(gh pr list --head "${FIXED_BRANCH}" --state open --json number,title,state)
        PR_NUMBER=$(echo "${PR_JSON}" | jq -r '.[0].number')
        
        if [ -z "${PR_NUMBER}" ] || [ "${PR_NUMBER}" = "null" ]; then
          echo "未找到对应的 PR，退出"
          exit 0
        fi
        
        echo "监控 PR #${PR_NUMBER} 状态..."
        
        # 等待 PR 合并或关闭
        while true; do
          PR_STATE=$(gh pr view "${PR_NUMBER}" --json state,merged --jq '.state')
          PR_MERGED=$(gh pr view "${PR_NUMBER}" --json state,merged --jq '.merged')
          
          if [ "${PR_STATE}" = "CLOSED" ]; then
            if [ "${PR_MERGED}" = "true" ]; then
              echo "PR #${PR_NUMBER} 已合并，开始删除分支 ${FIXED_BRANCH}"
              
              # 删除分支
              if git show-ref --verify --quiet "refs/heads/${FIXED_BRANCH}"; then
                git push origin --delete "${FIXED_BRANCH}"
                echo "✅ 分支 ${FIXED_BRANCH} 已成功删除"
              else
                echo "⚠️  分支 ${FIXED_BRANCH} 不存在，可能已被删除"
              fi
              
              break
            else
              echo "PR #${PR_NUMBER} 已关闭但未合并，不删除分支"
              break
            fi
          fi
          
          echo "PR 状态: ${PR_STATE}, 等待 30 秒后重试..."
          sleep 30
        done
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
